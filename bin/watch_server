#!/bin/bash
# Script to restart the go webserver by building and restarting the binary whenever go files change

source $HOME/.dev.env

if [ $# -eq 0 ]; then
	echo "Usage: $0 source_directory"
	exit 1
fi

WATCHDIR=$1
BUILDDIR=$(echo "${WATCHDIR}/server")

function __restart_goserver(){
  cd $BUILDDIR
  binary="$(basename $(pwd))"
  echo "building $binary"
  if go build -race -o $GOBIN/$binary
  then
    echo "killing old process"
    kill -9 $(pidof "$binary") > /dev/null 2>&1
    echo "starting '$binary'"
    $GOBIN/$binary & #run it in background
    echo "started with pid: $!"
  else
    echo "server restart failed"
  fi
}

#cd to the right directory
cd $WATCHDIR
__restart_goserver
#the command before the pipe is a blocking command, i.e. it doesn't end
inotifywait -m -r --format '%f' -e close_write $WATCHDIR | while read file
do
  if (echo $file | grep -E '^(.*\.go)$')
  then
    echo "--------------------"
    #once we know that a go file has been written to we run it
    __restart_goserver
  fi
done
